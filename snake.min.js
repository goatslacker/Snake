/**
  Copyright (C) 2011 by Josh Perez
  https://github.com/goatslacker/Snake

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/// ##Snake
//
// Constructs a new Snake object
//
// **Config** is an Object with the following parameters:
//
// * __name__ is the name of the database
// * __size__ is the size in bytes the data will take up
// * __description__ (optional)
// * __version__ any number, describe the version of the database. eg: 1.0
//
// **Schema** is an Object representing the model of your data
//
// A typical Schema looks like this:
//
//     {
//       "Siblings": {
//         "tableName": "siblings",
//           "columns": {
//           "name": { "type": "TEXT" },
//           "age": { "type": "INTEGER" }
//         }
//       }
//     }
//
// **preQueries** is an Array of SQL queries that Snake should execute prior to creating the tables
//
//
// Snake will construct the schema as a Collection and create the tables. Once it's finished it will
// return a new Object with direct access to the tables in the schema as well as an **SQL** method in it's prototype.
var Snake=function(a,b,c){var d=this.SYSTEM={};this.ARRAY=[],d.config=a||{},c=c||[];var e=[],f=[],g="hasOwnProperty";Object.keys(b).forEach(function(a){var c=b[a],d={fields:[],foreign:[]};c.jsName=a,c.map=[],c.columns.id={type:"INTEGER"},c.columns.created_at={type:"INTEGER"},Object.keys(c.columns).forEach(function(a){var b=c.columns[a];d.fields.push(a+" "+b.type),"foreign"in b&&(c.foreign={},function(){var e=b.foreign.split(".");c.foreign[e[0]]=[a,e[1]],d.foreign.push("FOREIGN KEY ("+a+") REFERENCES "+e[0]+"("+e[1]+")")}()),c.map.push(a)}),f.push(Snake.interpolate("CREATE TABLE IF NOT EXISTS '#{table}' (#{body})",{table:c.tableName,body:d.fields.concat(d.foreign).join(", ")})),e.push(c),this[c.tableName]=new Snake.collection(c,this)}.bind(this)),this.SQL(c.concat(f),null)};Snake.interpolate=function(a,b){Object.keys(b).forEach(function(c){b.hasOwnProperty(c)&&(a=a.replace(new RegExp("#{"+c+"}","g"),typeof b[c][1]=="f"?b[c]():b[c]))});return a},Snake.prototype.connect=function(a){var b=this.SYSTEM,c=b.config;a=a||function(){},b.database=openDatabase(c.name,c.version,c.displayName,c.size),b.database?(a(null,!0),b.connected=!0,Object.freeze(this.SYSTEM),this.ARRAY.forEach(function(a){this.SQL.apply(this,a)}.bind(this)),delete this.ARRAY):a("Could not open database")},Snake.prototype.SQL=function(a,b,c){var d=this.SYSTEM,e=this.ARRAY;if(!d.connected){e.push([a,b,c]);return this.connect()}b=b||null,c=c||function(a,b){},d.database.transaction(function(d){Array.isArray(a)||(a=[a]);var e=function(a,b){var d=null,e=null,f=0,g=0;try{d=b.insertId}catch(h){d=[],e=b.rows;if(e.length>0)for(f,g=e.length;f<g;f+=1)d.push(e.item(f))}c(null,d)};a.forEach(function(a){var f=a+";";d.executeSql(f,b,e,function(a,b){c(a)})})})},Snake.collection=function(a,b){var c={EQUAL:"=",NOT_EQUAL:"<>",GREATER_THAN:">",LESS_THAN:"<",GREATER_EQUAL:">=",LESS_EQUAL:"<=",ISNULL:"IS NULL",ISNOTNULL:"IS NOT NULL",LIKE:"LIKE",NOTLIKE:"NOT LIKE",IN:"IN",NOTIN:"NOT IN",LEFT_JOIN:"LEFT JOIN"},d={},e=function(){d.sql={distinct:!1,persist:!0,select:[],from:a.tableName,joins:[],where:{criterion:[],params:[]},orderBy:[],groupBy:[],limit:!1}},f=function(b,e,f){var g=[];f=f||c.EQUAL,b in a.columns&&(b=a.tableName+"."+b);switch(f){case c.ISNULL:case c.ISNOTNULL:d.sql.where.criterion.push(b+" "+f);break;case c.IN:case c.NOTIN:e.forEach(function(a){g.push("?")}),d.sql.where.criterion.push(b+" "+f+" ("+g.join(", ")+")");break;default:d.sql.where.criterion.push(b+" "+f+" ?")}e&&(Array.isArray(e)?d.sql.where.params=d.sql.where.params.concat(e):d.sql.where.params.push(e))},g=function(c,f,g){var h=null,i=Snake.interpolate;f=f||{},f.from=a.tableName,d.sql.joins.length>0&&(c=c+" "+d.sql.joins.join(" ")),d.sql.where.criterion.length>0&&(c=c+" WHERE #{where}",f.where=d.sql.where.criterion.join(" AND "),h=d.sql.where.params),d.sql.orderBy.length>0&&(c=c+" ORDER BY #{orderBy}",f.orderBy=d.sql.orderBy),d.sql.groupBy.length>0&&(c=c+" GROUP BY #{groupBy}",f.groupBy=d.sql.groupBy),d.sql.limit&&(d.sql.offset?(c=c+" LIMIT #{offset}, #{limit}",f.offset=d.sql.offset):c=c+" LIMIT #{limit}",f.limit=d.sql.limit),d.sql.persist?b.SQL(i(c,f),h,g):g&&g(null,i(c,f),h),e()};d={select:function(){var b=this;Array.prototype.forEach.call(arguments,function(c){a.columns.hasOwnProperty(c)&&b.sql.select.push(a.tableName+"."+c)});return this},toSQL:function(a){typeof a=="undefined"&&(a=this.sql.persist),this.sql.persist=!a;return this},distinct:function(){this.sql.distinct=!0,this.select.apply(this,arguments);return this},find:function(){var a=Array.prototype.slice.call(arguments,0),b=null,d=null,e=null;a.length>1?(b=a[0],d=a[1],d in c?e=c[d]:e=c[a[2]]||c.EQUAL,f(b,d,e)):typeof a[0]=="number"?f("id",a.shift()):Object.keys(a[0]).forEach(function(b){var g=null;d=a[0][b];switch(Object.prototype.toString.call(d)){case"[object Array]":e=c.IN,f(b,d,e);break;case"[object RegExp]":e=c.LIKE,g=d.toString(),d=g,g=d.replace(/\W/g,""),d.substr(1,1)==="^"?d=g+"%":d.substr(-2,1)==="$"?d="%"+g:d="%"+g+"%",f(b,d,e);break;case"[object Object]":Object.keys(d).forEach(function(a){e=c[a]||c.EQUAL,f(b,d[a],e)});break;default:e=c.EQUAL,f(b,d,e)}});return this},orderBy:function(b){var c=this;Object.keys(b).forEach(function(d){var e=b[d].toUpperCase();a.columns.hasOwnProperty(d)&&(d=a.tableName+"."+d),c.sql.orderBy.push(d+" "+e)});return this},groupBy:function(){var b=this,c=Array.prototype.slice.call(arguments,0);c.forEach(function(c){var d=null;a.columns.hasOwnProperty(c)&&(d=a.tableName+"."+c,b.sql.groupBy.push(d))});return this},join:function(b,d,e){var f=Snake.interpolate;e=c[e]||c.LEFT_JOIN,d?this.sql.joins.push(f("#{join_method} #{foreign_table} ON #{table}.#{primary_key} = #{foreign_table}.#{foreign_key}",{join_method:e,foreign_table:b,table:a.tableName,primary_key:d[0],foreign_key:d[1]})):"foreign"in a&&b in a.foreign&&this.sql.joins.push(f("#{join_method} #{foreign_table} ON #{table}.#{primary_key} = #{foreign_table}.#{foreign_key}",{join_method:e,foreign_table:b,table:a.tableName,primary_key:a.foreign[b][0],foreign_key:a.foreign[b][1]}));return this},offset:function(a){this.sql.offset=a;return this},limit:function(a){this.sql.limit=a;return this},retrieveByPK:function(a,b){this.find(a).doSelectOne(b)},doSelectOne:function(a){this.limit(1).doSelect(this.sql.persist?function(b,c){if(a)try{c.length>0?a(b,c[0]):a(null,null)}catch(d){a(d)}}:a)},doCount:function(a,b){b=(b||this.sql.distinct===!0)&&this.sql.select.length>0?"DISTINCT ":"";var c="SELECT COUNT("+b+"#{select}) AS count FROM #{from}",d=null,e={};this.sql.select.length===0?e.select="*":e.select=this.sql.select,this.sql.persist===!1?d=a:d=function(b,c){var d=c[0];a&&a(b,d.count)},g(c,e,d)},doDelete:function(a){g("DELETE FROM #{from}",null,a)},doSelect:function(a){var b="SELECT #{select} FROM #{from}",c={};this.sql.select.length===0?c.select="*":(c.select=this.sql.distinct?"DISTINCT ":"",c.select=c.select+this.sql.select),g(b,c,a)},save:function(c,d){var f=!c.hasOwnProperty("id"),g="",h=[],i=[],j=Snake.interpolate;f?(a.map.forEach(function(a){var b=c[a]||null;a==="created_at"&&b===null&&(b=Date.now()),i.push(b),h.push("?")}),g=j("INSERT INTO '#{table}' (#{columns}) VALUES (#{q})",{table:a.tableName,columns:a.map,q:h})):(a.map.forEach(function(a){var b=c[a]||null;b!==null&&(i.push(b),h.push(a+" = ?"))}),g=j("UPDATE #{table} SET #{conditions} WHERE id = ?",{table:a.tableName,conditions:h}),i.push(c.id)),this.sql.persist===!0?b.SQL(g,i,d):d&&d(null,g,i),e()},destroy:function(a,b){var c="";switch(typeof a){case"function":c=a(),c=c.id;break;case"object":c=a.id;break;default:c=a}c&&this.find(c).doDelete(b),e()}},e();return d};